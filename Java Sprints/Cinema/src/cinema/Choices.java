
package cinema;

import java.awt.Color;
import java.awt.Component;
import java.io.FileWriter;
import java.util.Iterator;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.hibernate.criterion.Restrictions;

public class Choices extends javax.swing.JFrame {

    private static SessionFactory factory;
    public static String sortType = "";
    public static String receipt = "";
    public static String something = "insert";
    
    /**
     * Creates new form movieChoices
     */
    public Choices() {
        initComponents();
        boxCinema();
        chosen();
        
  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblHeader = new javax.swing.JLabel();
        lblOption = new javax.swing.JLabel();
        cmbCategory = new javax.swing.JComboBox<>();
        cmbTime = new javax.swing.JComboBox<>();
        btnSubmit = new javax.swing.JButton();
        cmbCinema = new javax.swing.JComboBox<>();
        btnExportReceipt = new javax.swing.JButton();
        cmbSeat = new javax.swing.JComboBox<>();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        lblHeader.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblHeader.setText("Choices");

        lblOption.setText("Choice");

        cmbCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCategoryActionPerformed(evt);
            }
        });

        cmbTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "09:00", "11:30", "14:00", "16:30", "19:00" }));
        cmbTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTimeActionPerformed(evt);
            }
        });

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        cmbCinema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCinemaActionPerformed(evt);
            }
        });

        btnExportReceipt.setText("Export Receipt");
        btnExportReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportReceiptActionPerformed(evt);
            }
        });

        cmbSeat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9", "B10", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D10", "E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8", "E9", "E10", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10" }));

        btnBack.setText("Back");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cmbCinema, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cmbCategory, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSubmit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnExportReceipt)
                        .addGap(2, 2, 2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblOption)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                        .addComponent(cmbSeat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(194, 194, 194)))
                .addGap(32, 32, 32))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addComponent(lblHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(lblHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbCinema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOption)
                    .addComponent(cmbSeat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSubmit)
                    .addComponent(btnExportReceipt)
                    .addComponent(btnBack))
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCategoryActionPerformed
        if (BookingSystem.choice == "Movies") {  
            moviesShow(); 
        }
        
        if (BookingSystem.choice == "Seats") { 
            abomination();
            cellChanger();
        }
       
    }//GEN-LAST:event_cmbCategoryActionPerformed

    private void cmbCinemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCinemaActionPerformed
        abomination();
        cellChanger();
    }//GEN-LAST:event_cmbCinemaActionPerformed

    private void cmbTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTimeActionPerformed
        abomination();
        cellChanger();
    }//GEN-LAST:event_cmbTimeActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
      
        
        switch(something) {
        
            case "insert":
                
            
                        insert();
                        if (BookingSystem.choice == "Movies") {  
                            moviesShow(); 
                        }

                        if (BookingSystem.choice == "Seats") { 
                            
                            abomination();
                            cellChanger();
                        }
                       
                       BookingSystem.cmbOrder.setVisible(true);
                                BookingSystem.btnDisplay.setText("Booking Details");
                                
                                if (BookingSystem.isManager == true) {
                                    if (BookingSystem.cmbCustomer.getSelectedItem().toString().equals("All")) {
                                        BookingSystem.printAll();
                                    } else {
                                        BookingSystem.printBookings(Integer.valueOf(BookingSystem.cmbCustomer.getSelectedItem().toString())); 
                                    
                                    
                                    }} else {
            BookingSystem.printBookings(BookingSystem.userID); 
        }
                                

                           
                            
                    break;  

            case "update":
                update();
                
                if (BookingSystem.choice == "Movies") {  
                            moviesShow(); 
                        }

                        if (BookingSystem.choice == "Seats") { 
                            
                            abomination();
                            cellChanger();
                        }
                
                            BookingSystem.cmbOrder.setVisible(true);
                            BookingSystem.btnDisplay.setText("Booking Details");

                           if (BookingSystem.isManager == true) {
                                    if (BookingSystem.cmbCustomer.getSelectedItem().toString().equals("All")) {
                                        BookingSystem.printAll();
                                    } else {
                                        BookingSystem.printBookings(Integer.valueOf(BookingSystem.cmbCustomer.getSelectedItem().toString())); 
                                    
                                    
                                    }} else {
            BookingSystem.printBookings(BookingSystem.userID); 
        }
                break;
default:JOptionPane.showMessageDialog(null, "Fail");
        break;

    }

    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnExportReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportReceiptActionPerformed
        export(receipt);
    }//GEN-LAST:event_btnExportReceiptActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Choices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Choices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Choices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Choices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Choices().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private static javax.swing.JButton btnExportReceipt;
    private static javax.swing.JButton btnSubmit;
    private static javax.swing.JComboBox<String> cmbCategory;
    private static javax.swing.JComboBox<String> cmbCinema;
    private static javax.swing.JComboBox<String> cmbSeat;
    private static javax.swing.JComboBox<String> cmbTime;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTable jTable1;
    private static javax.swing.JLabel lblHeader;
    private static javax.swing.JLabel lblOption;
    // End of variables declaration//GEN-END:variables

    public static void export(String receipt){
        try {
            FileWriter writer = new FileWriter("Receipt.txt", false);
            writer.write(receipt);
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public static void chosen() {
        
        if (BookingSystem.choice == "Movies") {
            lblHeader.setText("Movies");
           
            lblOption.setVisible(false);
           
            cmbSeat.setVisible(false);
            cmbTime.setVisible(false);
            btnSubmit.setVisible(false);
            cmbCinema.setVisible(false);
            btnExportReceipt.setVisible(false);
            
            
            fillBox("genre");
            
        }
        
        if (BookingSystem.choice == "Seats") {
            lblHeader.setText("Seats");
            lblOption.setText("Seat");
            
            btnExportReceipt.setVisible(true);
            
            fillBox("movies");
            
        }
    }
    
    public static void moviesShow() {
        factory = new Configuration().configure().buildSessionFactory();
         Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();

            Criteria crit = null;
            List stuff = null;
            DefaultTableModel model = null;
            model = new DefaultTableModel(new String[]{"ID", "Name", "Genre"}, 0);
            
            
            if (cmbCategory.getSelectedItem().toString().equals("All")) {
                crit = session.createCriteria(POJOS.Movies.class);
                stuff = crit.list();
            
            } else {
                    crit = session.createCriteria(POJOS.Movies.class);
                    crit.add(Restrictions.eq("genre", cmbCategory.getSelectedItem().toString()));
                    stuff = crit.list();
            }
            

            if (stuff.size() > 0) {

                for (Iterator iterator = stuff.iterator(); iterator.hasNext();) {

                    POJOS.Movies list = (POJOS.Movies) iterator.next();
                    model.addRow(new Object[]{list.getMovieId(), list.getName(), list.getGenre()});
                }
                jTable1.setModel(model);

            } else {
                
            }
            tx.commit();

        } catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
        
    }
    
    
    public static void fillBox(String option) {
    
        switch (option) {
        
            case "movies": //list of movies
                
                printMovies();
                
                
                break;
            case "genre": //list of genres
                
                cmbCategory.addItem("Comedy");
                cmbCategory.addItem("Action");
                cmbCategory.addItem("Romance");
                cmbCategory.addItem("Adventure");
                cmbCategory.addItem("Mystery");
                cmbCategory.addItem("Animation");
                cmbCategory.addItem("Biography");
                cmbCategory.addItem("Crime");
                cmbCategory.addItem("Family");
                cmbCategory.addItem("Fantasy");
                cmbCategory.addItem("Horror");
                cmbCategory.addItem("Music");
                cmbCategory.addItem("Sci-Fi");
                cmbCategory.addItem("Thriller");
                cmbCategory.addItem("All");
                
                
                
                break;
            default:
                    break;
            
        }
    
    }
    
    public static void printMovies() {
    
        String answer = "";
        
         try {
        factory = new Configuration().configure().buildSessionFactory();
                
        Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            
            Criteria crit = null;
            List stuff = null;
            
            crit = session.createCriteria(POJOS.Movies.class);
            stuff = crit.list();
            
            for (Iterator iterator = stuff.iterator(); iterator.hasNext();) {

                    POJOS.Movies list = (POJOS.Movies) iterator.next();
                    
                    answer = list.getName();
                    cmbCategory.addItem(answer);
            }
            
                   tx.commit();
        }  catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
                
            } catch (Throwable ex) {
                System.err.println("An Error has occurred");
                throw new ExceptionInInitializerError(ex);
            }
            
        
    }
    
    
          

    public static void boxCinema() { 
    
        String answer = "";
        
         try {
        factory = new Configuration().configure().buildSessionFactory();
                
                Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            
            Criteria crit = null;
            List stuff = null;
            
            crit = session.createCriteria(POJOS.Cinema.class);
            stuff = crit.list();
            
            for (Iterator iterator = stuff.iterator(); iterator.hasNext();) {

                    POJOS.Cinema list = (POJOS.Cinema) iterator.next();
                    
                    answer = list.getName();
                    cmbCinema.addItem(answer);
            }
            
                   tx.commit();
        }  catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
                
            } catch (Throwable ex) {
                System.err.println("An Error has occurred");
                throw new ExceptionInInitializerError(ex);
            }
            
        
        
        
    }
    
    
    
    public static void abomination() {   
        
        String seatA = "";
        String seatB = "";
        String seatC = "";
        String seatD = "";
        String seatE = "";
        String seatF = "";
        
        
        DefaultTableModel model = null;
            model = new DefaultTableModel(new String[]{"A", "B", "C", "D", "E", "F"}, 0);
                
              
                
                boolean answer = false;
        String seat = "";
        
         try {
        factory = new Configuration().configure().buildSessionFactory();
                
                Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            
         
            List stuff = null;
          
          
        for (int row = 1; row <= 10; row++) {
            for (char column = 'A'; column <= 'F'; column++) {
                
                seat = column + String.valueOf(row);
            
            String hql = "FROM POJOS.Bookings WHERE time = '" +  cmbTime.getSelectedItem().toString() + "' AND seat = '" + seat + "' AND movie = '" + (cmbCategory.getSelectedIndex()+1) +"' AND cinema = " + (cmbCinema.getSelectedIndex()+1);
            Query query = session.createQuery(hql);
            stuff = query.list();
            
            
            if (stuff.size() > 0) {
                
                answer = true;
            
            
            } else{
                
                answer = false;
                    }
            
            if (answer == true) {
                    switch (column) {
                        case 'A':
                            seatA = "T";
                               break;
                        case 'B':
                            seatB = "T";
                               break;
                        case 'C':
                            seatC = "T";
                               break;
                        case 'D':
                            seatD = "T";
                               break;
                        case 'E':
                            seatE = "T";
                               break;
                        case 'F':
                            seatF = "T";
                               break;
                    }
                } else {
                    switch (column) {
                        case 'A':
                            seatA = "A";
                               break;
                        case 'B':
                            seatB = "A";
                               break;
                        case 'C':
                            seatC = "A";
                               break;
                        case 'D':
                            seatD = "A";
                               break;
                        case 'E':
                            seatE = "A";
                               break;
                        case 'F':
                            seatF = "A";
                               break;
                    }
                    
                }
         
            }
            
            model.addRow(new Object[]{"A"+ row + "(" + seatA + ")", "B"+ row + "(" + seatB + ")", "C"+ row + "(" + seatC + ")", "D"+ row + "(" + seatD + ")", "E"+ row + "(" + seatE + ")", "F"+ row + "(" + seatF + ")"});
        }
        
        jTable1.setModel(model);
            
        
            
            tx.commit();
                   
        }  catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
                
            } catch (Throwable ex) {
                System.err.println("An Error has occurred");
                throw new ExceptionInInitializerError(ex);
            }
           

    
    }
    public static void insert(){
        try {
        factory = new Configuration().configure().buildSessionFactory();
                
        Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            
            POJOS.Cinema cinema = (POJOS.Cinema) session.load(POJOS.Cinema.class, cmbCinema.getSelectedIndex()+1);
            POJOS.Customers customer = (POJOS.Customers) session.load(POJOS.Customers.class, BookingSystem.userID);
            POJOS.Movies movie = (POJOS.Movies) session.load(POJOS.Movies.class, cmbCategory.getSelectedIndex()+1);
            String time = cmbTime.getSelectedItem().toString();
            String seat = cmbSeat.getSelectedItem().toString();
            
         
            
            
            POJOS.Bookings booking = new POJOS.Bookings(cinema, customer, movie, time, seat);  
            
            session.save(booking);
            tx.commit();
            
            JOptionPane.showMessageDialog(null, "Booking was successful.");
            

          receipt = " \r\n Customer ID: " + String.valueOf(BookingSystem.userID) + " \r\n Name: " + customer.getName() + " \r\n Movie: " + movie.getName() + " \r\n Cinema: " + cinema.getName() + " \r\n Seat: " + seat + "\r\n Time: " + time;         
        } 
        
        catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
                JOptionPane.showMessageDialog(null, "Unfortunately the seat is already taken.");
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
                
            } catch (Throwable ex) {
                System.err.println("An Error has occurred");
                throw new ExceptionInInitializerError(ex);
            }
        
       
    }
    
    public static void update(){
        try {
        factory = new Configuration().configure().buildSessionFactory();
                
        Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
           
            POJOS.Cinema cinema = (POJOS.Cinema) session.load(POJOS.Cinema.class, cmbCinema.getSelectedIndex()+1);
            POJOS.Customers customer = (POJOS.Customers) session.load(POJOS.Customers.class, Login.userID);
            POJOS.Movies movie = (POJOS.Movies) session.load(POJOS.Movies.class, cmbCategory.getSelectedIndex()+1);
            String time = cmbTime.getSelectedItem().toString();
            String seat = cmbSeat.getSelectedItem().toString();
            
         
            String hql = "UPDATE POJOS.Bookings SET cinema = '"+cinema.getCinemaId()+"', movie = '"+movie.getMovieId()+"', time = '"+time+"', seat = '"+seat+"' WHERE bookingID = " + Integer.valueOf(BookingSystem.cmbBookingID.getSelectedItem().toString());
            Query query = session.createQuery(hql);
            query.executeUpdate();
      
            tx.commit();
        //       receipt = " Booking ID: " + BookingSystem.cmbBookingID.getSelectedItem().toString() + " \r\n Customer ID: " + String.valueOf(BookingSystem.userID) + " \r\n Name: " + customer.getName() + 
          //             " \r\n Movie: " + movie.getName() + " \r\n Cinema: " + cinema.getName() + " \r\n Seat: " + seat + "\r\n Time: " + time;    
        } 
        
        catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
                JOptionPane.showMessageDialog(null, "Unfortunately the seat is already taken.");
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
                
            } catch (Throwable ex) {
                System.err.println("An Error has occurred");
                throw new ExceptionInInitializerError(ex);
            }
        
    }
        
        public static int findLast() {
    
        int lastOne = 0;
        
         try {
        factory = new Configuration().configure().buildSessionFactory();
                
        Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();

            Criteria crit = null;
            List stuff = null;
            
                    crit = session.createCriteria(POJOS.Customers.class);
                   
                    stuff = crit.list();
                    if (stuff.size() > 0) {
                        for (Iterator iterator = stuff.iterator(); iterator.hasNext();) {
                           POJOS.Bookings acc = (POJOS.Bookings) iterator.next();
                           lastOne = acc.getBookingId(); 
                        
                        }
                      
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid login credentials.");
                    }
        tx.commit();
        }
        
        catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
                
            } catch (Throwable ex) {
                System.err.println("An Error has occurred");
                throw new ExceptionInInitializerError(ex);
            }
         
         return lastOne;
        
    }
       
    
    public void cellChanger(){
        for(int i = 0; i < 10; i++){
           for(int j = 0; j < 6; j++){
            jTable1.getColumnModel().getColumn(j).setCellRenderer(new StatusColumnCellRenderer());
        } 
        }
        
    }
    
}
class StatusColumnCellRenderer extends DefaultTableCellRenderer {
  @Override
  public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

    //Cells are by default rendered as a JLabel.
      JLabel l = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);

    //Get the status for the current row.
      TableModel tableModel = (TableModel) table.getModel();
      String valueCell = tableModel.getValueAt(row, col).toString();
    if (valueCell.charAt(valueCell.toString().length()-2) == 'A') {
      l.setBackground(Color.decode("#3CB371"));
    } else {
      l.setBackground(Color.decode("#C13333"));
    }

  //Return the JLabel which renders the cell.
  return l;

}
}