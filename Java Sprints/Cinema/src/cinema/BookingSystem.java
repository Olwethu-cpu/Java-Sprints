
package cinema;

import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.hibernate.criterion.Restrictions;

public class BookingSystem extends javax.swing.JFrame {
    
    public static String balance = "";
    public static String movie = "";
    public static String seat = "";
    public static String choice = "Movies";
    public static String action = Login.action;
    
    public static boolean isManager = true;
    
    public static int userID = Login.userID;
    
    private static String display = "bookings";
    
     private static SessionFactory factory;

    /**
     * Creates new form BankingInterface
     */
    public BookingSystem() {
        initComponents();
        managerRights();
        
        boxCinema();
        bookingBox();
        
        display = "customers";
        fillBox();
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnBookings = new javax.swing.JButton();
        btnMovies = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        cmbOrder = new javax.swing.JComboBox<>();
        btnUpdate = new javax.swing.JButton();
        btnDisplay = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblBookingID = new javax.swing.JLabel();
        cmbCustomer = new javax.swing.JComboBox<>();
        lblCustomer = new javax.swing.JLabel();
        cmbBookingID = new javax.swing.JComboBox<>();
        lblSort = new javax.swing.JLabel();
        btnLogOff = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnBookings.setText("Make Booking");
        btnBookings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookingsActionPerformed(evt);
            }
        });
        jPanel1.add(btnBookings, new org.netbeans.lib.awtextra.AbsoluteConstraints(394, 81, -1, -1));

        btnMovies.setText("View Movies");
        btnMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoviesActionPerformed(evt);
            }
        });
        jPanel1.add(btnMovies, new org.netbeans.lib.awtextra.AbsoluteConstraints(216, 81, -1, -1));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel1.setText("Booking System");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(216, 21, 288, 54));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(27, 125, 679, 172));

        cmbOrder.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Booking ID", "Customer ID", "Cinema", "Movie", "Seat" }));
        cmbOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOrderActionPerformed(evt);
            }
        });
        jPanel1.add(cmbOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(416, 331, -1, -1));

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jPanel1.add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 363, -1, -1));

        btnDisplay.setText("Customer Details");
        btnDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayActionPerformed(evt);
            }
        });
        jPanel1.add(btnDisplay, new org.netbeans.lib.awtextra.AbsoluteConstraints(416, 363, -1, -1));

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel1.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(284, 401, -1, -1));

        lblBookingID.setText("Booking ID");
        jPanel1.add(lblBookingID, new org.netbeans.lib.awtextra.AbsoluteConstraints(314, 309, -1, -1));

        cmbCustomer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All" }));
        cmbCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCustomerActionPerformed(evt);
            }
        });
        jPanel1.add(cmbCustomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(207, 331, 101, -1));

        lblCustomer.setText("Customer ID");
        jPanel1.add(lblCustomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(207, 309, -1, -1));

        cmbBookingID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbBookingIDActionPerformed(evt);
            }
        });
        jPanel1.add(cmbBookingID, new org.netbeans.lib.awtextra.AbsoluteConstraints(314, 331, 70, -1));

        lblSort.setText("Sort:");
        jPanel1.add(lblSort, new org.netbeans.lib.awtextra.AbsoluteConstraints(416, 309, -1, -1));

        btnLogOff.setText("Log Out");
        btnLogOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOffActionPerformed(evt);
            }
        });
        jPanel1.add(btnLogOff, new org.netbeans.lib.awtextra.AbsoluteConstraints(626, 401, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 15, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoviesActionPerformed
        
        choice = "Movies";
        
        Choices choose = new Choices();
        choose.something = "insert";
        choose.setVisible(true);
        
    }//GEN-LAST:event_btnMoviesActionPerformed
    
    private void btnBookingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookingsActionPerformed
        
        if (isManager == true) {
        
        if (cmbCustomer.getSelectedItem().toString().equals("All")) {
                                       
                                        JOptionPane.showMessageDialog(null, "Invalid Customer ID.");
                                    } else {
            
            
                                        printBookings(Integer.valueOf(cmbCustomer.getSelectedItem().toString())); 
                                    
                                        choice = "Seats";
                                        
                                        Choices choose = new Choices();
                                        choose.setVisible(true);
                                    }
        
        } else {
            choice = "Seats";
                                        
                                        Choices choose = new Choices();
                                        choose.setVisible(true);
        }
        
        
    }//GEN-LAST:event_btnBookingsActionPerformed

    private void btnDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayActionPerformed
        
         switch (display) {
        
            case "customers":
                
                
                display = "bookings";
                
                break;
            case "bookings": 
   
                display = "customers";
                
                break;
            default:
                    break;
            
        }
        
        fillBox();
    }//GEN-LAST:event_btnDisplayActionPerformed

    private void cmbOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrderActionPerformed
        if (isManager == true) {
            if (cmbCustomer.getSelectedItem().toString().equals("All")) {
                printAll();
            } else {
                printBookings(Integer.valueOf(BookingSystem.cmbCustomer.getSelectedItem().toString())); 
                }
        } else {
           printBookings(userID); 
        }
        
        
    }//GEN-LAST:event_cmbOrderActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        deleteRecord();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        
        
        action = "update";
        
        switch (display) {
            case "bookings":
                  
                choice = "Seats";
                
                Choices cho = new Choices();
                cho.something = "update";
                cho.setVisible(true);
                break;
            case "customers":
                
                  if (cmbCustomer.getSelectedItem().toString().equals("All")) {
                      JOptionPane.showMessageDialog(null, "Invalid Customer ID.");
                  } else {
                
                AccountCreation acc = new AccountCreation();
                acc.something = "update";
                acc.setVisible(true);
                  }
                break;
            default:
                break;
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void cmbCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCustomerActionPerformed
        fillBox();
        
        if (cmbCustomer.getSelectedItem().toString().equals("All")) {
            
        } else {
            userID = Integer.valueOf(cmbCustomer.getSelectedItem().toString());
        }
       
    }//GEN-LAST:event_cmbCustomerActionPerformed

    private void cmbBookingIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbBookingIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbBookingIDActionPerformed

    private void btnLogOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOffActionPerformed
        dispose();
    }//GEN-LAST:event_btnLogOffActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookingSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookingSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookingSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookingSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookingSystem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBookings;
    private static javax.swing.JButton btnDelete;
    public static javax.swing.JButton btnDisplay;
    private javax.swing.JButton btnLogOff;
    private javax.swing.JButton btnMovies;
    private static javax.swing.JButton btnUpdate;
    public static javax.swing.JComboBox<String> cmbBookingID;
    public static javax.swing.JComboBox<String> cmbCustomer;
    public static javax.swing.JComboBox<String> cmbOrder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTable jTable1;
    private static javax.swing.JLabel lblBookingID;
    private static javax.swing.JLabel lblCustomer;
    private static javax.swing.JLabel lblSort;
    // End of variables declaration//GEN-END:variables

    
    public static void logIN(String userName, String passWord) {
        
        
        try {
        factory = new Configuration().configure().buildSessionFactory();
                
        Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();

            Criteria critC = null;
            Criteria critM = null;
            List stuff = null;
            
            
        
                    critC = session.createCriteria(POJOS.Customers.class);
                    critC.add(Restrictions.eq("username", userName));
                    critC.add(Restrictions.eq("password", passWord));
                    
                    stuff = critC.list();
                    if (stuff.size() > 0) {
                        for (Iterator iterator = stuff.iterator(); iterator.hasNext();) {
                            POJOS.Customers acc = (POJOS.Customers) iterator.next();
                           userID = acc.getCustomerId(); 
                        
                        }
                        isManager = false;
                        
                        BookingSystem bank = new BookingSystem();
                        Login.userID = userID;
                        bank.userID = Login.userID;
                        bank.setVisible(true);
                    
                    }else {
                        
                        critM = session.createCriteria(POJOS.Managers.class);
                        critM.add(Restrictions.eq("username", userName));
                    critM.add(Restrictions.eq("password", passWord));
                        
                        stuff = critM.list();
                    if (stuff.size() > 0) {
                        for (Iterator iterator = stuff.iterator(); iterator.hasNext();) {
                            POJOS.Managers man = (POJOS.Managers) iterator.next();
                           userID = man.getManagerId(); 
                           
                        }
                        isManager = true;
                       
                        BookingSystem bank = new BookingSystem();
                        Login.userID = userID;
                        bank.userID = Login.userID;
                        bank.setVisible(true);
                       
           
                        
                    }}
                    if (stuff.size() == 0) {
                        JOptionPane.showMessageDialog(null, "Invalid login credentials.");
                    }
        tx.commit();
        }
        
        catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
                
            } catch (Throwable ex) {
                System.err.println("An Error has occurred");
                throw new ExceptionInInitializerError(ex);
            }
    
    }
    
    
    public static int findLast() {
    
        int lastOne = 0;
        
         try {
        factory = new Configuration().configure().buildSessionFactory();
                
        Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();

            Criteria crit = null;
            List stuff = null;
            
                    crit = session.createCriteria(POJOS.Customers.class);
                   
                    stuff = crit.list();
                    if (stuff.size() > 0) {
                        for (Iterator iterator = stuff.iterator(); iterator.hasNext();) {
                            POJOS.Customers acc = (POJOS.Customers) iterator.next();
                           lastOne = acc.getCustomerId(); 
                        
                        }
                      
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid login credentials.");
                    }
        tx.commit();
        }
        
        catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
                
            } catch (Throwable ex) {
                System.err.println("An Error has occurred");
                throw new ExceptionInInitializerError(ex);
            }
         
         return lastOne;
        
    }
    
    
    public static void inSERT(int idNum, String userName, String passWord, String name) {
        
        try {
        factory = new Configuration().configure().buildSessionFactory();
                
        Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            
            
            POJOS.Customers acc = new POJOS.Customers(idNum, name, passWord, userName);
                
                    session.save(acc);
                    tx.commit();
                    
                    JOptionPane.showMessageDialog(null, "Account successfully created.");
                    
        }  catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
                
            } catch (Throwable ex) {
                System.err.println("An Error has occurred");
                throw new ExceptionInInitializerError(ex);
            }
    
    }

    public static void printBookings(int id) {
        factory = new Configuration().configure().buildSessionFactory();
         Session session = factory.openSession();
        Transaction tx = null;

        DefaultTableModel model = null;
            model = new DefaultTableModel(new String[]{"Booking ID", "Customer", "Movie", "Cinema", "Time", "Seat"}, 0);
        jTable1.setModel(model);
        try {
            tx = session.beginTransaction();

            List stuff = null;
          
            String hql = "FROM POJOS.Bookings WHERE customer = '" + id + "'";
            
                
             switch (cmbOrder.getSelectedIndex()) {
            case 0:
                hql += " ORDER BY bookingID ASC";
                break;
            case 1:
                hql += " ORDER BY customer ASC";
                break;
            case 2:
                hql += " ORDER BY cinema ASC";
                break;
            case 3:
                hql += " ORDER BY movie ASC";
                break;
            case 4:
                hql += " ORDER BY seat ASC";
                break;
            default:
                return;

        }    
             Query query = session.createQuery(hql);
            stuff = query.list();
           
     
            if (stuff.size() > 0) {

                for (Iterator iterator = stuff.iterator(); iterator.hasNext();) {

                    POJOS.Bookings list = (POJOS.Bookings) iterator.next();
                    model.addRow(new Object[]{list.getBookingId(), list.getCustomers().getName(), list.getMovies().getName(), list.getCinema().getName(), list.getTime(), list.getSeat()});
                }
                jTable1.setModel(model);

            } else {
                
            }
            tx.commit();

        } catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
        
    }
    
    public static void printAll() {
        factory = new Configuration().configure().buildSessionFactory();
         Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();

            
            List stuff = null;
            DefaultTableModel model = null;
            model = new DefaultTableModel(new String[]{"Booking ID", "Customer", "Movie", "Cinema", "Time", "Seat"}, 0);
            

            String hql = "FROM POJOS.Bookings";
            
                
             switch (cmbOrder.getSelectedIndex()) {
            case 0:
                hql += " ORDER BY bookingID ASC";
                break;
            case 1:
                hql += " ORDER BY customer ASC";
                break;
            case 2:
                hql += " ORDER BY cinema ASC";
                break;
            case 3:
                hql += " ORDER BY movie ASC";
                break;
            case 4:
                hql += " ORDER BY seat ASC";
                break;
            default:
                return;

        }    
             Query query = session.createQuery(hql);
            stuff = query.list();
           
            if (stuff.size() > 0) {

                for (Iterator iterator = stuff.iterator(); iterator.hasNext();) {

                    POJOS.Bookings list = (POJOS.Bookings) iterator.next();
                    model.addRow(new Object[]{list.getBookingId(), list.getCustomers().getName(), list.getMovies().getName(), list.getCinema().getName(), list.getTime(), list.getSeat()});
                }
                jTable1.setModel(model);

            } else {
                
            }
            tx.commit();

        } catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
        
    }
    
    public static void fillBox() {
       
        switch (display) {
        
            case "customers": 
                lblSort.setVisible(false);
                cmbOrder.setVisible(false);
                btnDisplay.setText("Booking Details");
                
                if (isManager == true) {
                    cmbBookingID.setVisible(false);
                    lblBookingID.setVisible(false);
                }
                
                btnUpdate.setText("Update Customer");
                btnDelete.setText("Delete Customer");
                
                if (isManager == true) {
                    if (cmbCustomer.getSelectedItem().toString().equals("All")) {
                        printCustomers();
                    } else {
                        printIndividualCustomer(Integer.valueOf(cmbCustomer.getSelectedItem().toString()));
                    }
                    
                } else {
                    printIndividualCustomer(userID);
                }
                
                
                
                
                break;
            case "bookings": 
                lblSort.setVisible(true);
                cmbOrder.setVisible(true);
                btnDisplay.setText("Customer Details");
                
                if (isManager == true) {
                    cmbBookingID.setVisible(true);
                    lblBookingID.setVisible(true);
                }
                
                btnUpdate.setText("Update Booking");
                btnDelete.setText("Delete Booking");
                
                if (isManager == true) {
                    if (cmbCustomer.getSelectedItem().toString().equals("All")) {
                        printAll();
                    } else {   
                        printBookings(Integer.valueOf(cmbCustomer.getSelectedItem().toString()));
                    }
                } else {
                    printBookings(userID);
                }
                break;
            default:
                    break;
            
        }
    
    }
    
        public static void printCustomers() {
    
         try {
        factory = new Configuration().configure().buildSessionFactory();
                
        Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            
            Criteria crit = null;
            List stuff = null;
            
            DefaultTableModel model = null;
            model = new DefaultTableModel(new String[]{"Customer ID", "Name", "Username", "Password"}, 0);
            
            crit = session.createCriteria(POJOS.Customers.class);
            stuff = crit.list();
            
            for (Iterator iterator = stuff.iterator(); iterator.hasNext();) {

                    POJOS.Customers list = (POJOS.Customers) iterator.next();
                    
                    model.addRow(new Object[]{list.getCustomerId(), list.getName(), list.getUsername(), list.getPassword()});
            }
            
             jTable1.setModel(model);
            
                   tx.commit();
        }  catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
                
            } catch (Throwable ex) {
                System.err.println("An Error has occurred");
                throw new ExceptionInInitializerError(ex);
            }
            
        
        
        
    }
        
    public static void printIndividualCustomer(int customer) {
    
         try {
        factory = new Configuration().configure().buildSessionFactory();
                
        Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
        
            List stuff = null;
            
            DefaultTableModel model = null;
             model = new DefaultTableModel(new String[]{"Customer ID", "Name", "Username", "Password"}, 0);
            
            String hql = "FROM POJOS.Customers WHERE customerID = " + customer;
            Query query = session.createQuery(hql);
            stuff = query.list();
            
            for (Iterator iterator = stuff.iterator(); iterator.hasNext();) {

                    POJOS.Customers list = (POJOS.Customers) iterator.next();
                   
                    model.addRow(new Object[]{list.getCustomerId(), list.getName(), list.getUsername(), list.getPassword()});
            }
            
             jTable1.setModel(model);
            
                   tx.commit();
        }  catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
                
            } catch (Throwable ex) {
                System.err.println("An Error has occurred");
                throw new ExceptionInInitializerError(ex);
            }
            
        
        
        
    }
    
    public static void printIndividualCustomerBookings(int customer) {
    
         try {
        factory = new Configuration().configure().buildSessionFactory();
                
                Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            
           
            List stuff = null;
            
            DefaultTableModel model = null;
            model = new DefaultTableModel(new String[]{"Customer ID", "Name", "Username", "Password"}, 0);
            
            String hql = "FROM POJOS.Customers WHERE customerID = " + customer;
            Query query = session.createQuery(hql);
            stuff = query.list();
            
            for (Iterator iterator = stuff.iterator(); iterator.hasNext();) {

                    POJOS.Customers list = (POJOS.Customers) iterator.next();
             
                    model.addRow(new Object[]{list.getCustomerId(), list.getName(), list.getUsername(), list.getPassword()});
            }
            
             jTable1.setModel(model);
            
                   tx.commit();
        }  catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
                
            } catch (Throwable ex) {
                System.err.println("An Error has occurred");
                throw new ExceptionInInitializerError(ex);
            }
            
        
        
        
    }
        
    public static void deleteRecord() {
        
        switch (display) {
        
            case "customers":
 
                
                deleteCustomer(Integer.valueOf(cmbCustomer.getSelectedItem().toString()));
                fillBox();
                
                break;
            case "bookings":
                
                
                deleteBooking(Integer.valueOf(cmbBookingID.getSelectedItem().toString()));    
                
                fillBox();
  
                break;
            default:
                    break;
            
        }
        
    }
    
    
    public static void deleteCustomer(int id) {
    
         try {
        factory = new Configuration().configure().buildSessionFactory();
                
                Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            POJOS.Customers del = (POJOS.Customers) session.get(POJOS.Customers.class, id);
                    session.delete(del);
                    tx.commit();
                } catch (HibernateException e) {
                    if (tx != null) {
                        tx.rollback();
                    }
                    e.printStackTrace();
                } finally {
                    session.close();
        }} catch (Throwable ex) {
                System.err.println("An Error has occurred");
                throw new ExceptionInInitializerError(ex);
            }
    
    }
    
    public static void deleteBooking(int id) {
        
         try {
        factory = new Configuration().configure().buildSessionFactory();
                
                Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            POJOS.Bookings del = (POJOS.Bookings) session.get(POJOS.Bookings.class, id);
                    session.delete(del);
                    tx.commit();
                } catch (HibernateException e) {
                    if (tx != null) {
                        tx.rollback();
                    }
                    e.printStackTrace();
                } finally {
                    session.close();
        }} catch (Throwable ex) {
                System.err.println("An Error has occurred");
                throw new ExceptionInInitializerError(ex);
            }
        
    }
    
    public static void updateCustomer(int id, String name, String username, String password) {
    
        try {
        factory = new Configuration().configure().buildSessionFactory();
                
                Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            POJOS.Customers cust = (POJOS.Customers) session.get(POJOS.Customers.class, id);
                   
                    
                    cust.setName(name);
                    cust.setUsername(username);
                    cust.setPassword(password);
                    
                    session.update(cust);
                    tx.commit();
                } catch (HibernateException e) {
                    if (tx != null) {
                        tx.rollback();
                    }
                    e.printStackTrace();
                } finally {
                    session.close();
        }} catch (Throwable ex) {
                System.err.println("An Error has occurred");
                throw new ExceptionInInitializerError(ex);
            }
        
    }
    
    public static void boxCinema() { 
    
        int answer = 0;
        
         try {
        factory = new Configuration().configure().buildSessionFactory();
                
                Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            
            Criteria crit = null;
            List stuff = null;
            
            crit = session.createCriteria(POJOS.Customers.class);
            stuff = crit.list();
            
            for (Iterator iterator = stuff.iterator(); iterator.hasNext();) {

                    POJOS.Customers list = (POJOS.Customers) iterator.next();
                    
                    answer = list.getCustomerId();
                    cmbCustomer.addItem(String.valueOf(answer));
            }
            
                   tx.commit();
        }  catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
                
            } catch (Throwable ex) {
                System.err.println("An Error has occurred");
                throw new ExceptionInInitializerError(ex);
            }
            
        
        
        
    }
    
    public static void managerRights() {
        
            cmbCustomer.setVisible(isManager);
            
            cmbBookingID.setVisible(isManager);
            lblBookingID.setVisible(isManager);
            btnDelete.setVisible(isManager);
           
            btnUpdate.setVisible(isManager);
            lblCustomer.setVisible(isManager);
        
    }
    
    
    public static void bookingBox() {
     int answer = 0;
        
         try {
        factory = new Configuration().configure().buildSessionFactory();
                
                Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            
            Criteria crit = null;
            List stuff = null;
            
            crit = session.createCriteria(POJOS.Bookings.class);
            stuff = crit.list();
            
            for (Iterator iterator = stuff.iterator(); iterator.hasNext();) {

                    POJOS.Bookings list = (POJOS.Bookings) iterator.next();
                    
                    answer = list.getBookingId();
                    cmbBookingID.addItem(String.valueOf(answer));
            }
            
                   tx.commit();
        }  catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
                
            } catch (Throwable ex) {
                System.err.println("An Error has occurred");
                throw new ExceptionInInitializerError(ex);
            }
            
    }

}
